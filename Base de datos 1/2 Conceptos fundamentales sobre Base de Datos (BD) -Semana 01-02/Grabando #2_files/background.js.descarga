'use strict';const uploader=OffscreenProxy.for("Uploader"),screenRec=OffscreenProxy.for("ScreenRec"),webcamOnlyRec=OffscreenProxy.for("WebcamOnlyRec"),logger=OffscreenProxy.for("Logger");let contextMenuInfo={openRecorder:{id:"spOpenRecorder",title:"Open Recorder"},openSettings:{id:"spOpenSettings",title:"Settings for this site"}},pipState={width:"266px",height:"200px",fixedTop:"auto",fixedBottom:"20px",fixedLeft:"auto",fixedRight:"20px"};loadPIPState();
let lastSubmitErrorResult="",checkWhichIsWaiting=void 0,recordingInProgress=!1,webcamOnlyRecordingInProgress=!1,tabIdThatStartedRecording=void 0,tabIdThatStartedEditing=void 0,commandKeys=["Alt+1","Alt+2","Alt+3"],forceEffects=!1,recordingUsingInPage=!1,recordingReportFrom=void 0,effectsUsedInRecording=[],tabShowingPopup=void 0,tabCaptureMediaId=void 0,tabCaptureMaxSize=void 0,openSlackRecorderTabId=void 0,openSlackRecorderUrl=void 0,openSlackCancelUrl=void 0,openSlackRecorderType=void 0,openSlackWaitingForNav=
!1,appInstalled=!1;const slackDefaultRecorderWebsite="https://google.com";let slackRecorderWebsite=slackDefaultRecorderWebsite,waitingToLog=[],writeToLog=(a,c)=>{waitingToLog.push({type:a,text:c})};function setupLogging(){writeToLog=(a,c)=>{logger.call("writeToLog",{type:a,text:c})};appInstalled&&logger.call("truncate");setTimeout(()=>{logger.call("startLogging");for(let a of waitingToLog)logger.call("writeToLog",a);waitingToLog=[]},100)}writeToLog("DEBUG","\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d");
writeToLog("DEBUG","\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d STARING UP \x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d");writeToLog("DEBUG","\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d");writeToLog("DEBUG","ScreenPal Version: "+RuntimeParams.getVersion());writeToLog("DEBUG","UserAgent: "+navigator.userAgent);
writeToLog("DEBUG","IsDebug: "+RuntimeParams.isDebug());console=function(){return{log:function(a){writeToLog("DEBUG",a)},info:function(a){writeToLog("INFO",a)},warn:function(a){writeToLog("WARN",a)},error:function(a,c){var k=writeToLog;let e=Error().stack.split("\n"),b=3;c&&"string"===typeof c.stack&&(e=c.stack.split("\n"),b=0);c="";for(let f of e)0<b--||(c+=f+"\n");k("ERROR",a+"\n"+c)}}}();function offscreenIsReady(){setupLogging()}Utils.isEmbed()&&offscreenIsReady();
let reloadExtension=function(){chrome.runtime.reload()},tabRemovedListenerForWebcamOnlyClosing=function(a,c){a===tabIdThatStartedRecording&&(console.log("Tab that started webcam only is closing so cancelling the recording. (tab: "+tabIdThatStartedRecording+")"),TooltipRecService.doAction("recCancel"))},tabRemovedListenerForSlackTabClosing=function(a,c){a===openSlackRecorderTabId&&openSlackCancelUrl&&(console.log("Slack recorder tab is closing so cancelling the recording. (tab: "+openSlackRecorderTabId+
")"),fetch(openSlackCancelUrl),openSlackCancelUrl=openSlackRecorderUrl=openSlackRecorderTabId=void 0,chrome.tabs.onRemoved.removeListener(tabRemovedListenerForSlackTabClosing))},tabRemovedListenerForEditorClosing=function(a,c){a===tabIdThatStartedEditing&&(console.log("Editing tab is closing so cancelling the recording. (tab: "+tabIdThatStartedEditing+")"),TooltipRecService.doAction("recCancel"))},tabRemovedListenerForChooseShareClosing=function(a,c){a===tabIdThatStartedRecording&&(console.log("Tab that is showing choose prompt is closing so reloading. (tab: "+
tabIdThatStartedEditing+")"),reloadExtension())};TooltipRecService.listenInBackground();DomainSettings.init(function(){console.log("DomainSettings init.")});
if(Utils.isEmbed())Config.init().then(()=>{console.log("Config init.");Utils.sendMessage({backgroundReady:!0},"active")});else{function a(){let b=RuntimeParams.getSomHost()+"/register/screenpal";console.log("Opening tab since failed to open popup menu: "+b);chrome.tabs.create({url:b},function(){})}function c(){chrome.tabs.query({currentWindow:!0,active:!0},function(b){0!==b.length&&b[0]&&(b=b[0],Utils.setQueueMessagesForTabId(b.id)&&k(b))})}function k(b){b.url.startsWith("http")&&!b.url.startsWith("https://chrome.google.com/")?
chrome.tabs.sendMessage(b.id,{activeCheck:!0},function(){if(chrome.runtime.lastError){let f=chrome.runtime.getManifest().content_scripts[0].css,h=chrome.runtime.getManifest().content_scripts[0].js;chrome.scripting.insertCSS({target:{tabId:b.id},files:f}).then(()=>{chrome.scripting.executeScript({target:{tabId:b.id},files:h}).then(()=>{Utils.clearQueueMessagesForTabId(b.id,!0)}).catch(g=>{Utils.setFailedToSetupTabId(b.id);console.error("CHECK SCRIPT: Failed to executeScript to add js! (tab id:"+b.id+
"): "+b.url+" error: "+JSON.stringify(g))})}).catch(g=>{Utils.setFailedToSetupTabId(b.id);console.error("CHECK SCRIPT: Failed to insertCSS to add css! (tab id:"+b.id+"): "+b.url+" error: "+JSON.stringify(g))})}else Utils.clearQueueMessagesForTabId(b.id,!0)}):Utils.clearQueueMessagesForTabId(b.id,!1)}let e;chrome.commands.onCommand.addListener(b=>{if(b.startsWith("effects-")){let f=parseInt(b.substr(8));!0===recordingInProgress||forceEffects?(console.log("Recieved HOTKEY while enabled to firing effect for command: "+
b),Preferences.load("recControlsPrefs",null,h=>{(!recordingUsingInPage||h&&h.setupInPageToggles&&h.setupInPageToggles.effects)&&EffectSettings.init(function(){var g=EffectSettings.getEffectAudio(f-1);if(g){let m=document.createElement("audio");m.src="app/"+g.src;m.play()}g=EffectSettings.getEffectVideo(f-1);Utils.sendMessage({effects:"toggle",num:f,transitionIn:g.transitionIn,transitionOut:e?e.transitionOut:void 0},"active");e=g;!0!==recordingInProgress||effectsUsedInRecording.includes(g.id)||effectsUsedInRecording.push(g.id)})})):
console.log("Recieved HOTKEY while disabled so ignoring for command: "+b)}});chrome.action.onClicked.addListener(function(b){Utils.sendMessage({launcherMenu:"close"},"inactive");Utils.sendMessage({launcherMenu:"toggle"},"active",function(){a()});tabShowingPopup=b;if(b.url.endsWith("screenpal.com/content/videos")||b.url.endsWith("screenpal.com/content/video")){let f=(new URL(b.url)).host;f.endsWith("screenpal.com")&&(self.spHost="https://"+f,OffscreenProxy.for("spHost").call("setHost",{host:self.spHost}),
console.log("Opening launcher on /content so taking host from: "+b.url+" (spHost \x3d "+self.spHost+")"))}});chrome.contextMenus.onClicked.addListener(function(b,f){f=b.menuItemId;new URL(b.pageUrl);Utils.sendMessage({popupMenu:"close"});f===contextMenuInfo.openSettings.id?Utils.sendMessage({popupMenu:"toggle"},"active",function(){a()}):f===contextMenuInfo.openRecorder.id&&Utils.sendMessage({openRecorder:!0},"active",function(){a()})});chrome.runtime.onInstalled.addListener(function(b){appInstalled=
!0;console.log("Running onInstalled: "+JSON.stringify(b));setupContextMenu();"install"===b.reason?(SOM.event("AppInstall"),setTimeout(function(){let f=RuntimeParams.getSomHost()+"/register/screenpal";chrome.tabs.create({url:f},function(){console.log("Tab launched with register url:"+f)})},1E3)):"update"===b.reason?(console.log('Extension "update" called'),SOM.event("AppUpdated")):"chrome_update"===b.reason?console.log('Extension "chrome_update" called'):"shared_module_update"===b.reason&&console.log('Extension "shared_module_update" called');
chrome.runtime.sendMessage("kfbjihgmkgahpocjppdkdmdalinpnabb",{uninstall:!0},()=>{})});chrome.runtime.setUninstallURL(RuntimeParams.getSomHost()+"/chrome-extension-uninstall");chrome.runtime.onStartup.addListener(function(){console.log("Running onStartup.");setupContextMenu()});chrome.windows.onFocusChanged.addListener(function(){c()});chrome.tabs.onActivated.addListener(function(b){Utils.setQueueMessagesForTabId(b.tabId)&&chrome.tabs.get(b.tabId,function(f){k(f)})});chrome.webNavigation.onHistoryStateUpdated.addListener(function(b){Utils.sendMessageNoLogging({historyStateUpdate:!0},
b.tabId)});Config.init().then(()=>{console.log("Config init.");setTimeout(function(){console.log("Checking that active tab has script running on startup (in case this is a reload).");c()},100)})}
Utils.receiveMessagesInBackground(function(a,c,k){let e=c&&c.tab?c.tab.id:"active";c&&c.url&&c.url.endsWith("offscreen.html")&&(e="offscreen");a.initTab||a.logMessage||console.log("Got request from tab "+e+" with data: "+JSON.stringify(a));if(a.initTab)tabIdThatStartedRecording&&tabIdThatStartedRecording===e&&(!Utils.isEmbed()&&screenRec.get("waitingForSetup")&&(console.log("Tab that was waiting for user to choose has navigated so we will reload to kill screen recorder (tab: "+tabIdThatStartedRecording+
")"),reloadExtension()),webcamOnlyRecordingInProgress&&(console.log("Tab that started webcam only recording has navigated so we will cancel. (tab: "+tabIdThatStartedRecording+")"),TooltipRecService.doAction("recCancel")),openSlackRecorderTabId===e?console.log("Tab that started slack has navigated but that is ok so not triggering flyout. (tab: "+tabIdThatStartedRecording+")"):(console.log("Tab that started recording has navigated so we will show flyout when recording is done (tab: "+tabIdThatStartedRecording+
")"),tabIdThatStartedRecording=void 0)),"editing"===recordingInProgress&&tabIdThatStartedEditing===e&&(console.log("Editing tab has navigated so we will cancel editing. (tab: "+tabIdThatStartedEditing+")"),TooltipRecService.doAction("recCancel")),c=void 0,openSlackRecorderTabId===e&&openSlackWaitingForNav&&(c=slackRecorderWebsite===slackDefaultRecorderWebsite?"default":"previous"),openSlackRecorderTabId!==e||"web"!==openSlackRecorderType||openSlackWaitingForNav||(console.log("Got navigation on slack recorder site so saving url: "+
a.url),slackRecorderWebsite=a.url),openSlackWaitingForNav=!1,k({config:Config.get(),pipState,recorderEnabled:DomainSettings.getDomainRecordingEnabled(a.host,a.url),pageIconEnabled:DomainSettings.getDomainPageIconEnabled(a.host,a.url),previewEnabled:DomainSettings.getDomainPreviewEnabled(a.host,a.url),linkExpandEnabled:DomainSettings.getDomainLinkExpandEnabled(a.host,a.url),recordingInProgress,tabCaptureEnabled:tabCaptureMediaId&&tabShowingPopup.id===e,spHost:"string"===typeof self.spHost?self.spHost:
void 0,openSlackRecorderUrl:openSlackRecorderTabId===e?openSlackRecorderUrl:void 0,openSlackNavigated:c});else{if(a.copyText)return OffscreenProxy.for("CopyText").call("doCopyText",{text:a.copyText}).then(b=>{k({copyResult:b})}),!0;if(a.generateAi){let b=SOM.getHostFromPlayUrl(a.playUrl),f=SOM.getIdFromPlayUrl(a.playUrl),h=uploader.get("audioUrl",null),g=Date.now(),m=()=>{SOM.generateAi(b,f,a.generateAi,h).then(l=>{"Success"===l.status?SOM.getScreencastInfo(b,f).then(d=>{Utils.sendMessage({aiStatus:"ready",
info:d},e)}).catch(()=>{console.error("Failed to get info after AI success.");Utils.sendMessage({aiStatus:"error"},e)}):"InProgress"===l.status||"NotReady"===l.status?(console.log("Waiting a bit to check AI status."),l=1E4>Date.now()-g?5E3:2E3,setTimeout(m,l)):(console.error("Failed to check AI returned bad status: "+l.status),Utils.sendMessage({aiStatus:"error"},e))}).catch(l=>{401===l.response.status?(console.error("Got to check AI unauthorized: "+l),Utils.sendMessage({aiStatus:""},e)):(console.error("Failed to check AI: "+
l),Utils.sendMessage({aiStatus:"error"},e))})};console.log("Calling to start AI.");m()}else if(a.logMessage){c=a.logMessage.page;let b=a.logMessage.type,f=a.logMessage.text;-1!==c.indexOf("/app")&&(c=c.substr(1).replace(".html",""));writeToLog(b,"TAB:"+e+" ("+c+") "+f)}else if(a.jumpToRecordedTab)highlightActiveRecordingTab();else if(a.getPreviewUrl)c=uploader.get("localFileUrl"),k({url:c});else if(a.getEffectsKeys)k({keys:commandKeys});else if(a.forceEffects)forceEffects=a.set;else if(a.getLogFileUrl)k({url:logger.get("logURL")});
else if(a.countDown)CountDown.handle(a);else if(a.pipState)handlePIPState(a.pipState);else if(a.record)DeviceManager.init(function(){handleRecord(a,e)});else if(a.getScreencastInfo)SOM.getScreencastInfo(a.getScreencastInfo.host,a.getScreencastInfo.id).then(b=>{Utils.sendMessage({getScreencastInfo:b},e)}).catch(()=>{console.error("Failed to getScreencastInfo so using default.");Utils.sendMessage({getScreencastInfo:{id:a.getScreencastInfo.id,resolution:"1280x720"}},e)});else if(a.getSomupRedirect)SOM.getSomupRedirect(a.getSomupRedirect.id).then(b=>
{Utils.sendMessage({getSomupRedirect:b},e)}).catch(b=>{console.error("Failed to getSomupRedirect. (e: "+JSON.stringify(b)+")");Utils.sendMessage({getSomupRedirect:{failed:!0}},e)});else if(a.checkUnfurlUrl){let b=(new Date).getTime(),f=h=>{let g=(new Date).getTime()-b;SOM.event("AppLinkExpand",{took:g,result:h,host:a.checkUnfurlUrl.host,id:a.checkUnfurlUrl.id,from:a.checkUnfurlUrl.domain})};SOM.getScreencastInfo(a.checkUnfurlUrl.host,a.checkUnfurlUrl.id).then(h=>{f(JSON.stringify(h));Utils.sendMessage({checkUnfurlUrl:{id:a.checkUnfurlUrl.id,
data:h}},e)}).catch(h=>{f("error - "+h);Utils.sendMessage({checkUnfurlUrl:{id:a.checkUnfurlUrl.id,data:void 0}},e)})}else a.getDomainSetting?"recorder-enabled"===a.getDomainSetting.type?k(DomainSettings.getDomainRecordingEnabled(a.getDomainSetting.domain)):"page-icon-enabled"===a.getDomainSetting.type?k(DomainSettings.getDomainPageIconEnabled(a.getDomainSetting.domain)):"preview-enabled"===a.getDomainSetting.type?k(DomainSettings.getDomainPreviewEnabled(a.getDomainSetting.domain)):"link-expand-enabled"===
a.getDomainSetting.type?k(DomainSettings.getDomainLinkExpandEnabled(a.getDomainSetting.domain)):console.error("Got unknown getDomainSetting request: "+JSON.stringify(a.setDomainSetting)):a.setDomainSetting?("recorder-enabled"===a.setDomainSetting.type?DomainSettings.setDomainRecordingEnabled(a.setDomainSetting.domain,a.setDomainSetting.set):"page-icon-enabled"===a.setDomainSetting.type?DomainSettings.setDomainPageIconEnabled(a.setDomainSetting.domain,a.setDomainSetting.set):"preview-enabled"===a.setDomainSetting.type?
DomainSettings.setDomainPreviewEnabled(a.setDomainSetting.domain,a.setDomainSetting.set):"link-expand-enabled"===a.setDomainSetting.type?DomainSettings.setDomainLinkExpandEnabled(a.setDomainSetting.domain,a.setDomainSetting.set):console.error("Got unknown setDomainSetting request: "+JSON.stringify(a.setDomainSetting)),reportPreferenceUpdate(a.setDomainSetting.type,a.setDomainSetting.set,a.setDomainSetting.from),notifyDomainSettingsUpdate(a.setDomainSetting.domain)):a.submitFeedback?(lastSubmitErrorResult=
"",console.log("Fetch submitFeedback"),SOM.submitFeedback(a.submitFeedback.email,a.submitFeedback.comment,a.submitFeedback.attachLog?logger.get("logURL"):void 0).then(()=>{lastSubmitErrorResult="ok";console.log("Fetch submitFeedback SUCCESS")}).catch(b=>{lastSubmitErrorResult=b;console.log("Fetch submitFeedback Failed: "+b)})):a.submitFeedbackCheck?k(lastSubmitErrorResult):a.setRecordingId?uploader.set("recordingId",a.setRecordingId):a.checkWhichIsDone?handleCheckWhichCallback():a.killRecorderSetup?
screenRec.get("waitingForSetup")?(console.log("Reloading to kill any waiting recorder setup."),Utils.isEmbed()?document.location.reload():reloadExtension()):console.log("No need to kill since recorder isn't waiting for setup right now."):a.editorOpen?(tabIdThatStartedEditing=e,console.log("Editing tab found so watching for nav or closing to cancel editing. (tab: "+tabIdThatStartedEditing+")"),chrome.tabs.onRemoved.addListener(tabRemovedListenerForEditorClosing)):a.checkSession?(SOM.checkSession().then(b=>
{Utils.sendMessage({sessionInfo:b},e)}),chrome.commands.getAll(function(b){commandKeys=[];for(let f of b)if(f.name.startsWith("effects-")){b=parseInt(f.name.substr(8));let h=f.shortcut;0<=navigator.platform.toUpperCase().indexOf("MAC")?(h=h.replace("\u2318","Command+"),h=h.replace("\u2325","Option+"),h=h.replace("\u21e7","Shift+")):h=h.toUpperCase();commandKeys[b]=h;console.log("Found effect command #"+b+": "+h)}})):a.reportEvent?SOM.event(a.reportEvent,a.props):a.tabCapture?(console.log("Attempting getMediaStreamId for tabCapture on tab: "+
tabShowingPopup.id),chrome.tabCapture.getMediaStreamId({targetTabId:tabShowingPopup.id},function(b){console.log("getMediaStreamId for tabCapture: "+b);chrome.tabs.query({},function(f){let h=void 0;for(let g of f)if(g.id===tabShowingPopup.id){h={width:g.width,height:g.height};console.log("Found tab size after getMediaStreamId: "+JSON.stringify(h));break}tabCaptureMaxSize=SOM.getMaxRecordingDimension(h);tabCaptureMediaId=b;console.log("Setting up getMediaStreamId for tabCapture with maxDimension: "+
JSON.stringify(tabCaptureMaxSize))})})):a.cancelTabCapture?(console.log("Cancelling tab capture."),shutdownTabCaptureMedia()):a.openSlackRecorder?(openSlackRecorderTabId=e,openSlackRecorderUrl=a.openSlackRecorder,openSlackRecorderType=a.type,(openSlackCancelUrl=a.onCancelUrl)&&chrome.tabs.onRemoved.addListener(tabRemovedListenerForSlackTabClosing),"web"===openSlackRecorderType?(openSlackWaitingForNav=!0,k({url:slackRecorderWebsite})):"fullscreen"===openSlackRecorderType?(c=RuntimeParams.getSomHost()+
"/slack-record-fullscreen",k({url:c})):"webcam"===openSlackRecorderType&&(c=RuntimeParams.getSomHost()+"/slack-record-camera",k({url:c}))):a.cancelSlackRecorder?(openSlackCancelUrl=openSlackRecorderUrl=openSlackRecorderTabId=void 0,fetch(a.onCancelUrl),chrome.tabs.onRemoved.removeListener(tabRemovedListenerForSlackTabClosing),chrome.tabs.remove(e,function(){})):a.postSlackRecorder?(openSlackCancelUrl=openSlackRecorderUrl=openSlackRecorderTabId=void 0,chrome.tabs.onRemoved.removeListener(tabRemovedListenerForSlackTabClosing),
chrome.tabs.remove(e,function(){}),a.onWaitingForGifUrl&&(console.log("Calling back that we're waiting for GIF on slack."),fetch(a.onWaitingForGifUrl)),console.log("Waiting until GIF is uploaded before reporting done to slack."),uploader.call("setGifUploadCallback",{callback:()=>{console.log("GIF upload done so reporting done to slack.");fetch(a.onDoneUrl)}})):a.resetSlackRecorderUrl?openSlackRecorderTabId&&(slackRecorderWebsite=slackDefaultRecorderWebsite,Utils.sendMessage({navigate:slackRecorderWebsite},
openSlackRecorderTabId)):console.log("Unknown request in background: "+JSON.stringify(a))}});function notifyDomainSettingsUpdate(a){Utils.sendMessage({domainSettings:"update",domain:a,recorderEnabled:DomainSettings.getDomainRecordingEnabled(a),pageIconEnabled:DomainSettings.getDomainPageIconEnabled(a),previewEnabled:DomainSettings.getDomainPreviewEnabled(a),linkExpandEnabled:DomainSettings.getDomainLinkExpandEnabled(a)})}
function setupContextMenu(){console.log("Setting up context menu.");chrome.contextMenus.removeAll();chrome.contextMenus.create({id:"spContextMenu",title:"ScreenPal",contexts:["page"]});chrome.contextMenus.create({parentId:"spContextMenu",id:contextMenuInfo.openRecorder.id,title:contextMenuInfo.openRecorder.title});chrome.contextMenus.create({parentId:"spContextMenu",id:contextMenuInfo.openSettings.id,title:contextMenuInfo.openSettings.title})}
function reportPreferenceUpdate(a,c,k){SOM.event("AppPreferenceUpdate",{name:a,value:c,from:k})}function handlePIPState(a){pipState=a;Preferences.save("pipState",pipState);Utils.sendMessage({pipState},"inactive")}function loadPIPState(){Preferences.load("pipState",pipState,function(a){pipState=a})}
function handleRecord(a,c){recordingInProgress=!0;recordingUsingInPage=a.isInPage;recordingReportFrom=a.from?a.from:a.isInPage?"tab-icon":"textbox-icon";tabIdThatStartedRecording=c;effectsUsedInRecording=[];CountDown.whenReady(()=>{uploader.call("onCountDownReady")});OffscreenProxy.for("JPGPreview").set("enabled",a.uploadPreview);OffscreenProxy.for("GIFPreview").set("enabled",a.useGIF);OffscreenProxy.for("GIFPreview").set("drawBorder",a.drawBorderOnGIF);OffscreenProxy.for("GIFPreview").set("drawNoOverlays",
a.drawNoOverlaysOnGIF);let k=a.maxTimeMS;console.log("Record starting with max time: "+k);let e=!1,b=!1,f=function(g){!e&&g>=k?(console.log("Max time reached so stopping track and telling app we're stopped."),TooltipRecService.maxTimeHit(),highlightAfterRecordingIsDone(),e=!0):!b&&g+6E4>=k&&(b=!0,TooltipRecService.maxTimeWarning())},h=function(g,m,l,d){let p="editing"===recordingInProgress,q="NO_FOLDER_RECORD_IN_BROWSER"===a.folder,n=q?"NO_FOLDER":a.folder;shutdownTabCaptureMedia();let r=!1;if("success"===
l&&q){r=!0;let t=SOM.getManageUrlFromPlayUrl(uploader.get("shareUrl"),"extension-upload");Utils.isEmbed()?window.open(t,"_blank"):chrome.tabs.create({url:t},function(){console.log("Tab launched to manage in browser recorded video:"+t)})}Utils.sendMessage({done:r?"openedManageVideo":l,title:uploader.get("title",a.title),playUrl:uploader.get("shareUrl"),sharePreviewUrl:uploader.get("sharePreviewUrl",null),editVideoSrcUrl:uploader.get("localFileUrl"),resolution:g,durationMS:d.finalDurationMS,hasAudio:m});
"edit"!==l?(recordingInProgress=!1,tabIdThatStartedEditing&&(console.log("Editing tab cleared since we got final success callback: "+l+" (tab: "+tabIdThatStartedEditing+")"),tabIdThatStartedEditing=void 0,chrome.tabs.onRemoved.removeListener(tabRemovedListenerForEditorClosing))):recordingInProgress="editing";p||r||highlightAfterRecordingIsDone(function(t){tabIdThatStartedRecording=void 0;t||("edit"===l?Utils.sendMessage({showEdit:!0,editVideoSrcUrl:uploader.get("localFileUrl"),resolution:g,durationMS:d.finalDurationMS,
hasAudio:m},"active"):"success"===l&&(console.log("Original tab looks gone so telling active tab to show flyout"),Utils.sendMessage({showFlyout:!0,title:a.title,url:uploader.get("shareUrl")},"active")))});"success"===l&&(!n&&a.host&&(n="/Video Messaging/"+a.host.toLowerCase()),n&&"NO_FOLDER"!==n?uploader.call("putInFolder",n):console.log('No folder so NOT calling end point to add folder. (folder:"'+n+'")'),0<effectsUsedInRecording.length&&(SOM.event("AppStockUsed",{ids:effectsUsedInRecording.join()}),
effectsUsedInRecording=[]),d=void 0===d?{}:d,SOM.event("AppPublish",{destination:"SOM",title:a.title,folder:n,success:!0,durationMS:d.finalDurationMS,trimStartMS:d.trimStartMS?Math.round(d.trimStartMS):void 0,trimEndMS:500<d.trimEndMS?Math.round(d.trimEndMS):void 0,crop:d.crop?d.crop.x+","+d.crop.y+","+d.crop.width+","+d.crop.height:void 0,from:recordingReportFrom}))};if("screen"===a.record||"both"===a.record){let g=function(d){0===d.frameId&&(console.log("Nav onComplete callback: "+JSON.stringify(d)),
TooltipRecService.addFloatingControls(d.tabId))},m=function(d){console.log("Tab Activated callback: "+JSON.stringify(d));setTimeout(function(){chrome.tabs.get(d.tabId,function(p){"complete"===p.status?(console.log("Activated callback on complete: "+JSON.stringify(p.status)),TooltipRecService.addFloatingControls(d.tabId)):console.log("Activated callback on complete: "+JSON.stringify(p.status))})},500)},l=function(d){console.log("Window focus callback: "+JSON.stringify(d));-1===d||checkWhichIsWaiting||
TooltipRecService.addFloatingControls("active")};Utils.isEmbed()||chrome.tabs.onRemoved.addListener(tabRemovedListenerForChooseShareClosing);c=void 0;"tab"===a.chooseType&&tabCaptureMediaId?c={source:"tabCapture",tab:tabShowingPopup,tabMediaId:tabCaptureMediaId,tabMaxSize:tabCaptureMaxSize}:a.chooseType&&(c={source:"desktop",chooseType:a.chooseType},shutdownTabCaptureMedia());screenRec.call("start",{type:c,micId:a.useMic?DeviceManager.getSelectedMicDeviceId():!1}).then(function(d){Utils.isEmbed()||
chrome.tabs.onRemoved.removeListener(tabRemovedListenerForChooseShareClosing);screenRec.call("onStreamEnd",{callback:()=>{!0===recordingInProgress?(console.log("Stream track stopped telling recorder controls to recStop."),TooltipRecService.doAction("recStop"),highlightAfterRecordingIsDone()):checkWhichIsWaiting&&(console.log("Stream track stopped while waiting for checkWhichIsWaiting so telling recorder controls to recCancel."),checkWhichIsWaiting=void 0,TooltipRecService.doAction("recCancel"))}});
let p=a.record+"-"+d.streamFrom,q="window";"browser"===d.streamFrom?q="tab":"monitor"===d.streamFrom&&(q="screen");SOM.event("AppRecorderStart",{capture:"screen"===a.record?"desktop":"PIP",source:q,captureSize:d.resolution.width+"x"+d.resolution.height,computerAudio:d.hasSystemAudio,narration:a.useMic?DeviceManager.getSelectedMicName():"none",webcam:"both"===a.record?DeviceManager.getSelectedCameraName():"none",from:recordingReportFrom});return TooltipRecService.startRecording(a.recId,p,d.resolution,
d.stream,a.title,a.createPreview,f,function(n,r){Utils.isEmbed()||(console.log("Removing listeners to show controls on any tab since we're done."),chrome.webNavigation.onCompleted.removeListener(g),chrome.tabs.onActivated.removeListener(m),chrome.windows.onFocusChanged.removeListener(l));screenRec.call("closeStream");h(d.resolution,d.hasAudio,n,r)}).then(function(){if(Utils.isEmbed())return TooltipRecService.startFloatingControls(p,"active",d.hasAudio,k,!0);console.log("Adding listeners to show controls on any tab.");
chrome.webNavigation.onCompleted.addListener(g);chrome.tabs.onActivated.addListener(m);chrome.windows.onFocusChanged.addListener(l);let n=function(){TooltipRecService.startFloatingControls(p,"active",d.hasAudio,k,a.isInPage)};a.isInPage?n():checkTabAndWindowRecording(d.streamFrom,function(){"browser"===d.streamFrom&&Utils.sendMessage({notRecordingTab:!0},"inactive");n()})})}).catch(function(d){recordingInProgress=!1;tabIdThatStartedRecording=void 0;Utils.isEmbed()||chrome.tabs.onRemoved.removeListener(tabRemovedListenerForChooseShareClosing);
d instanceof Error&&"NotAllowedError"===d.name&&"Permission denied"===d.message?(console.info("User canceled while starting screenRec."),Utils.sendMessage({canceled:"true"})):(console.error("Failed to start screenRec: "+d),d=notifyRecordingError(d),SOM.event("AppRecorderStart",{capture:"screen"===a.record?"desktop":"PIP",error:d,from:recordingReportFrom}))})}else if("webcam"===a.record){shutdownTabCaptureMedia();let g={width:1280,height:720};webcamOnlyRec.call("start",{audioConstraint:a.useMic?DeviceManager.getMicDeviceIdConstraint():
!1,videoConstraint:DeviceManager.getCameraDeviceIdConstraint({width:g.width,height:g.height})}).then(function(m){webcamOnlyRecordingInProgress=!0;Utils.isEmbed()||chrome.tabs.onRemoved.addListener(tabRemovedListenerForWebcamOnlyClosing);SOM.event("AppRecorderStart",{capture:"webcam",captureSize:g.width+"x"+g.height,narration:a.useMic?DeviceManager.getSelectedMicName():"none",webcam:DeviceManager.getSelectedCameraName(),from:recordingReportFrom});return TooltipRecService.startRecording(a.recId,a.record,
g,m,a.title,a.createPreview,f,function(l,d){webcamOnlyRecordingInProgress=!1;Utils.isEmbed()||chrome.tabs.onRemoved.removeListener(tabRemovedListenerForWebcamOnlyClosing);h(g,a.useMic,l,d)}).then(function(){return a.isInPage?TooltipRecService.startFloatingControls("webcam","active",a.useMic,k,!0):{}})}).catch(function(m){recordingInProgress=!1;console.log("Failed to start webcam recording "+m);m=notifyRecordingError(m);SOM.event("AppRecorderStart",{capture:"webcam",error:m,from:recordingReportFrom})})}else console.log("Unknown record request: "+
JSON.stringify(a))}function shutdownTabCaptureMedia(){tabShowingPopup=tabCaptureMaxSize=tabCaptureMediaId=void 0}function checkTabAndWindowRecording(a,c){"monitor"===a?(console.log("Requesting monitor so skipping checkTabAndWindowRecording"),c()):"window"===a?(console.log("Requesting window so skipping checkTabAndWindowRecording"),c()):(checkWhichIsWaiting=c,setTimeout(function(){Utils.sendMessage({checkWhich:a},"active")},100))}
function handleCheckWhichCallback(){void 0===checkWhichIsWaiting?console.error("No checkWhichIsWaiting callback"):checkWhichIsWaiting()}function notifyRecordingError(a){a instanceof Error&&(a=a.message);a instanceof String||(a=""+a);Utils.sendMessage({failed:"true",error:a});return a}
function highlightActiveRecordingTab(){if(!Utils.isEmbed()){var a=TooltipRecService.getRecordedTabId();void 0===a?console.error("No recorded tab id so can't jump to it"):(console.log("Highlighting tab that is being recorded: "+a),chrome.tabs.get(a,function(c){c?highlightTab(c):console.error("Failed to request tab to jump back to it.")}))}}
function highlightAfterRecordingIsDone(a){Utils.isEmbed()?a&&a(!0):tabIdThatStartedRecording?(console.log("Highlighting tab that started the recording now that we're done (tab:"+tabIdThatStartedRecording+")."),chrome.tabs.get(tabIdThatStartedRecording,function(c){c?(highlightTab(c),a&&a(!0)):(console.log("Highlighting failed for tab that started the recording (tab:"+tabIdThatStartedRecording+")."),a&&a(!1))})):(console.log("Tab that started the recording is gone so can't highlight."),a&&a(!1))}
function highlightTab(a){Utils.isEmbed()||(console.log("Highlighting tab: "+JSON.stringify(a)),chrome.tabs.highlight({windowId:a.windowId,tabs:a.index},function(){}))};