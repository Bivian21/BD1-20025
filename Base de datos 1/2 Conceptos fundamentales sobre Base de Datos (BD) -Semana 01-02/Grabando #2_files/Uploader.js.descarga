'use strict';self.Uploader=function(){function u(b){let c;c="cancelKey\x3d"+(b+"/"+a.partsId)+"\n";c+="numParts\x3d"+a.cancelNumParts+"\n";c+="partSuffix\x3d.part\n";console.log("Sending transcode cancel properties:"+c);return a.s3.upload({Body:c,Bucket:a.somInfo.bucketName,Key:b+"."+a.partsId+".cancel.transcoder.extension-v3.properties"}).promise().then(()=>{console.log("Sent transcode cancel properties.")}).catch(()=>{console.log("Sent failed for transcode cancel properties.")})}function v(b,c,
e,g,d){a.somInfo.audioUrl&&(void 0===e&&void 0===g||0===e&&1E3>Math.abs(RecTime.getDurationMS()-g)?(console.log("Using audioUrl since NO trimming startMS\x3d"+e+" lenMS\x3d"+g+" recTime\x3d"+RecTime.getDurationMS()),a.set("audioUrl",a.somInfo.audioUrl.replace("NUMPARTS",a.totalNumParts).replace("KEY",encodeURIComponent(b+"/"+a.partsId)))):console.log("NOT using audioUrl since trimming startMS\x3d"+e+" lenMS\x3d"+g+" recTime\x3d"+RecTime.getDurationMS()));return SOM.getTranscodeInfo(b,c).then(l=>{var k=
a.resolution;let h;h="inputKey\x3d"+(b+"/"+a.partsId)+"\n";h+="numParts\x3d"+a.totalNumParts+"\n";h=h+"partSuffix\x3d.part\ntotalByteSize\x3d"+(a.uploadedTotalBytes+"\n");h+="durationMS\x3d"+RecTime.getDurationMS()+"\n";h+="inputSize\x3d"+k.width+"x"+k.height+"\n";void 0!==e&&void 0!==g&&(h+="trimStart\x3d"+(e/1E3).toFixed(3)+"\n",h+="trimLen\x3d"+(g/1E3).toFixed(3)+"\n");!a.canTranscodeJustCopy||e&&0!==e||(h+="partsAreH264\x3dtrue\n");d&&(0>d.x&&(d.width+=d.x,d.x=0),0>d.y&&(d.height+=d.y,d.y=0),
d.x+d.width>k.width&&(d.width=k.width-d.x),d.y+d.height>k.height&&(d.height=k.height-d.y),h+="cropPos\x3d"+d.x+","+d.y+"\n",h+="cropSize\x3d"+d.width+"x"+d.height+"\n");(k=SOM.getLastCheckSessionResult())&&k.maxResolution&&(h+="maxResolution\x3d"+k.maxResolution+"\n");k=a.somInfo.readyUrl;a.recordingId&&(k+="\x26recording\x3d"+a.recordingId);h+="outputKey\x3d"+l.transcodeObject+"\n";h+="onReady\x3d"+k+"\n";if(k=a.somInfo.reportProgressUrl)h+="reportProgressUrl\x3d"+k+"\n",k=k.replace("PERCENT","0"),
fetch(k,{method:"PUT",credentials:"include"}).then(n=>{console.log("Reported transcode progress zero: "+(n.ok?"SUCCESS":"FAILED"))}).catch(n=>{console.log("Reported transcode progress zero error: "+n)});console.log("Sending transcode properties:"+h);return a.s3.upload({Body:h,Bucket:a.somInfo.bucketName,Key:b+"."+a.partsId+".transcoder.extension-v3.properties"}).promise().then(()=>({putSharePreviewUrl:l.putSharePreviewUrl,putPreviewUrl:l.putPreviewUrl,sharePreviewUrl:l.sharePreviewUrl.replace("d1ka0itfguscri",
"dvx0yeo9xfidh")}))})}function w(b,c){y(b,c);z(b,function(){p("success")})}function z(b,c){let e=(new Date).getTime();b.putPreviewUrl?JPGPreview.getBlob(g=>{g?(console.log("Transcode started, now uploading preview JPG (size:"+g.size+")"),SOM.uploadPreview(b.putPreviewUrl,g).then(()=>{console.log("Got upload jpg preview success (took:"+((new Date).getTime()-e)+")");c()}).catch(d=>{console.error("Upload preview failed: "+d);c()})):(console.log("Transcode started no jpg preview needed so returning success."),
c())}):(console.log("Transcode started NO jpg put preview returned so returning success."),c())}function y(b,c){let e=(new Date).getTime();GIFPreview.setDuration(c);GIFPreview.getBlob(g=>{g?(console.log("Transcode started, now uploading sharePreview GIF (size:"+g.size+")"),SOM.uploadSharePreview(b.putSharePreviewUrl,"gif",g).then(()=>{console.log("Got upload sharePreview success: "+b.sharePreviewUrl+" (took:"+((new Date).getTime()-e)+")");a.gifUploadDone=!0;a.gifPreviewCallback&&(a.gifPreviewCallback(),
a.gifPreviewCallback=void 0)}).catch(d=>{console.error("Upload sharePreview failed: "+d)})):console.log("Transcode started no preview so returning success.")});GIFPreview.isEnabled()&&a.set("sharePreviewUrl",b.sharePreviewUrl)}function p(b){"success"!==b&&"cancel"!==b||LocalFile.finished();a.doneReceiveTime&&(SOM.event("AppUploadDelay",{totalParts:a.totalNumParts,numPartsWaitingToUploadOnDone:a.numPartsWaitingToUploadOnDone,recordingSec:RecTime.getDurationMS()/1E3,recordingResolution:a.resolution.width+
"x"+a.resolution.height,waitedSec:((new Date).getTime()-a.doneReceiveTime)/1E3,avgPartUploadSec:a.uploadedTotalTime/a.uploadedTotalBytes*2097152/1E3,uploadRateKBit:a.uploadedTotalBytes/8/(a.uploadedTotalTime/1E3)/1E3,uploadedTotalMB:a.uploadedTotalBytes/1048576}),console.log("Uploader waited for result: "+((new Date).getTime()-a.doneReceiveTime)+"ms"));a.doneCallback(b,{finalDurationMS:a.finalDurationMS?a.finalDurationMS:RecTime.getDurationMS(),trimStartMS:a.finalTrimStartMS,trimEndMS:a.finalTrimEndMS,
crop:a.finalCrop})}function q(){let b=!1;a.mediaRecorder&&"inactive"!==a.mediaRecorder.state&&(a.mediaRecorder.stop(),b=!0);a.videoStream&&(Utils.stopStream(a.videoStream),a.videoStream=void 0);return b}function x(b){a.videoStream=b;a.totalNumParts=void 0;a.cancelNumParts=0;a.partsId=(new Date).getTime();a.uploadedTotalBytes=0;a.uploadId=void 0;a.uploadedTotalTime=0;AWS.config.update({credentials:a.somInfo.awsCredentails});a.s3=new AWS.S3({useAccelerateEndpoint:a.somInfo.useAccel});let c={mimeType:"video/webm;codecs\x3dH264,opus"};
MediaRecorder.isTypeSupported(c.mimeType)?a.canTranscodeJustCopy=!0:(console.log(c.mimeType+" is not Supported"),c={mimeType:"video/webm;codecs\x3dvp9,opus"},MediaRecorder.isTypeSupported(c.mimeType)||(console.log(c.mimeType+" is not Supported"),c={mimeType:"video/webm;codecs\x3dvp8,opus"},MediaRecorder.isTypeSupported(c.mimeType)||(console.log(c.mimeType+" is not Supported"),c={mimeType:"video/webm"},MediaRecorder.isTypeSupported(c.mimeType)||(console.log(c.mimeType+" is not Supported"),c={mimeType:""}))));
c.audioBitsPerSecond=128E3;c.videoKeyFrameIntervalDuration=1E3;var e=b.getVideoTracks()[0].getSettings();e.width&&e.height&&(e=e.width*e.height,c.videoBitsPerSecond=3686400<e?12E6:2073600<e?6E6:921600<e?4E6:2E6);LocalFile.init(a.somInfo.objectName,()=>{a.set("localFileUrl",LocalFile.getURL())});console.log("Setting up MediaRecorder: "+JSON.stringify(c));a.mediaRecorder=new MediaRecorder(b,c);const g=a.somInfo.objectName;console.log("Initializing upload.");let d=[],l=0,k=0,h=0,n=0;Rx.Observable.empty().startWith(0).switchMap(()=>
{console.log("Got upload id so starting recorder with blobs.");RecTime.reset();a.onCountDownReady=function(){console.log("CountDown says its ready so starting media recorder now!");a.mediaRecorder.start(500);RecTime.start();GIFPreview.collectFrames(b);JPGPreview.collectFrames(b);a.uploadDurationInterval=setInterval(function(){let f=RecTime.getDurationMS();a.lastDurationReport!==f&&(a.lastDurationReport=f,a.updateTimeCallback(f))},1E3)};a.mediaRecorder.addEventListener("stop",function(){clearInterval(a.uploadDurationInterval);
!a.doRestart&&a.doCancel&&(console.log("Recording cancelled so telling proxy."),SOM.cancelUpload(a.somInfo.cancelUrl).catch(f=>{console.error("Failed to cancel som upload"+f)}))});a.mediaRecorder.onpause=()=>{RecTime.pause()};a.mediaRecorder.onresume=()=>{RecTime.resume()};return Rx.Observable.fromEvent(a.mediaRecorder,"dataavailable")}).takeUntil(Rx.Observable.fromEvent(a.mediaRecorder,"stop")).map(f=>{console.log("Received blob (size: "+f.data.size+")");return{blob:f.data}}).filter(f=>{if(a.doCancel)return console.log("  Rejecting blob since cancelling (waiting num: "+
d.length+" size: "+l+")"),!1;if(a.doRestart)return console.log("  Rejecting blob since restarting (waiting num: "+d.length+" size: "+l+")"),!1;if(0===f.blob.size)return console.log("  Rejecting blob with 0 size (waiting num: "+d.length+" size: "+l+")"),!1;h++;return!0}).concatMap(({blob:f})=>{console.log("Writing blob (size: "+f.size+")");return LocalFile.write(f).then(m=>{console.log("Wrote blob (size: "+m.size+")");h--;return{blob:m}})}).filter(f=>{a.doEdit&&(0===h?(console.log("Recording done and last blob written so calling back to show editor."),
a.doneCallback("edit",{finalDurationMS:RecTime.getDurationMS()})):console.log("Recording done but waiting for last blob to be written before calling back to show editor. (numBlobsWaitingToWrite: "+h+")"));if(2097152>f.blob.size||0<d.length){d.push(f.blob);l+=f.blob.size;if(2097152<l||"inactive"===a.mediaRecorder.state)return f.blob=new Blob(d,{type:"video/webm"}),console.log(" Merged blob ready (waiting num: "+d.length+" size: "+l+" recorderState: "+a.mediaRecorder.state+")"),d=[],l=0,n++,!0;console.log("  Holding blob (waiting num: "+
d.length+" size: "+l+")");return!1}n++;return!0}).concatMap(({blob:f})=>{if(a.canTranscodeJustCopy){var m=b.getVideoTracks()[0].getSettings();m.width&&m.height&&(m={width:m.width,height:m.height},m.width!==a.resolution.width||m.height!==a.resolution.height)&&(console.log("Detected stream resize so can't copy in transcoder (orig:"+JSON.stringify(a.resolution)+" new:"+JSON.stringify(m)+")"),a.canTranscodeJustCopy=!1)}a.doneReceiveTime&&0===a.numPartsWaitingToUploadOnDone&&0<n&&(a.numPartsWaitingToUploadOnDone=
n);let A=(new Date).getTime(),r=k++;n--;console.log("Uploading blob (partnum: "+r+" size: "+f.size+" waiting: "+n+")");return a.s3.upload({Body:f,Bucket:a.somInfo.bucketName,Key:g+"/"+a.partsId+"/"+r+".part",ContentLength:f.size}).promise().then(({ETag:B})=>{console.log("Uploaded blob (partnum: "+r+" size: "+f.size+")");a.uploadedTotalTime+=(new Date).getTime()-A;a.uploadedTotalBytes+=f.size;a.cancelNumParts++;return{ETag:B,PartNumber:r}})}).toArray().switchMap(()=>{if(a.doRestart)throw Error("doRestart");
if(a.doCancel)throw Error("doCancel");return Rx.Observable.empty().startWith(0)}).subscribe(({})=>{console.log("Uploaded successfully.");a.totalNumParts=k;if(a.trimAfterUploadComplete)console.log("Upload done so finishing up trim."),a.trimAfterUploadComplete(),a.trimAfterUploadComplete=void 0;else if(a.doEdit)console.log("Recording done but edit requested so NOT starting transcode yet.");else{var f=function(){console.log("Recording done starting transcode...");v(g,"gif").then(m=>{w(m,RecTime.getDurationMS())}).catch(m=>
{console.error("Transcode start failed: "+m);SOM.reportError("TranscodeStartFailed",m);p("error")})};a.doDone?f():(console.log("Screen share was stopped but done not clicked yet so NOT starting transcode yet."),a.doneCallWhenReady=f)}},f=>{u(g);a.doRestart||a.doCancel?a.doCancel?p("cancel"):a.doRestart&&(LocalFile.finished(),a.videoStream?(console.log("Upload aborted and doing restart"),a.doRestart=!1,RecTime.reset(),a.updateTimeCallback(0),x(a.videoStream)):(console.log("Restart requested but no video stream so making error callback."),
p("error"))):(console.error(f),SOM.reportError("RecordingFailed",f),console.log("Stopping mediaRecorder and stream since we have error above."),q(),p("error"))})}let a={mediaRecorder:null,gifPreviewCallback:void 0};const t=OffscreenProxy.for("Uploader").connect(a);a.setGifUploadCallback=function(b){a.gifUploadDone&&b();a.gifPreviewCallback=b};a.start=function(b,c,e,g,d){a.doRestart=!1;a.doCancel=!1;a.doEdit=!1;a.doDone=!1;a.numPartsWaitingToUploadOnDone=0;a.doneCallWhenReady=void 0;a.shareUrl=void 0;
a.sharePreviewUrl=void 0;a.finalDurationMS=void 0;a.finalTrimStartMS=void 0;a.finalTrimEndMS=void 0;a.finalCrop=void 0;a.doneReceiveTime=void 0;a.totalNumParts=void 0;a.cancelNumParts=0;a.partsId=(new Date).getTime();a.resolution=c;a.gifUploadDone=!1;a.set("title",b);a.doneCallback=g;a.updateTimeCallback=d;return SOM.initUpload("webm",b,c,Utils.hasAudioTrack(e)).then(l=>{a.somInfo=l;a.set("shareUrl",a.somInfo.playbackUrl);x(e);return l.playbackUrl})};a.done=function(){a.doneReceiveTime=(new Date).getTime();
a.doDone=!0;a.doneCallWhenReady?(console.log("Done waiting for callback so calling finish now."),a.doneCallWhenReady(),a.doneCallWhenReady=void 0):q()};a.pause=function(){a.mediaRecorder&&"inactive"!==a.mediaRecorder.state&&(console.log("Pausing uploader"),a.mediaRecorder.pause())};a.resume=function(){a.mediaRecorder&&"inactive"!==a.mediaRecorder.state&&(console.log("Resuming uploader waiting for count down"),a.onCountDownReady=function(){console.log("Resuming uploader count down done so starting");
a.mediaRecorder.resume()})};a.restart=function(){a.mediaRecorder&&"inactive"!==a.mediaRecorder.state&&(a.doRestart=!0,a.mediaRecorder.stop())};a.cancel=function(){a.doEdit||a.doneCallWhenReady?(console.log("Got cancel while uploader already waiting for editor or done so calling back that we cancelled."),u(a.somInfo.objectName),p("cancel")):(a.doCancel=!0,q()||(console.log("Got cancel while with inactive recorder so calling back that we cancelled."),p("cancel")))};a.edit=function(){!a.doEdit&&a.doneCallWhenReady?
(console.log("Done waiting for callback so we can start editor now."),a.doEdit=!0,a.doneCallback("edit",{finalDurationMS:RecTime.getDurationMS()})):a.mediaRecorder&&"inactive"!==a.mediaRecorder.state?a.doEdit?console.error("Got duplicate call to edit but already in that mode so ignoring."):(a.doEdit=!0,q()):console.error("Media recorder not active so ignoring edit request.")};a.openVideoEditor=function(){void 0===a.totalNumParts&&(console.info("Upload still in progress after trim so waiting for it to be done!"),
a.trimAfterUploadComplete=function(){a.openVideoEditor()})};a.trim=function(b,c,e){a.doneReceiveTime||(a.doneReceiveTime=(new Date).getTime());void 0===a.totalNumParts?(console.info("Upload still in progress after trim so waiting for it to be done!"),a.trimAfterUploadComplete=function(){a.trim(b,c,e)}):void 0!==a.finalDurationMS?console.error("Got call to trim but already received one so ignoring."):(a.finalDurationMS=c,a.finalTrimStartMS=b,a.finalTrimEndMS=RecTime.getDurationMS()-b-c-500,a.finalCrop=
e,GIFPreview.collectFramesAfterTrim(LocalFile.getURL(),b,c,e),JPGPreview.collectFramesAfterTrim(LocalFile.getURL(),b,c,e),console.log("Recording trim done so starting transcode..."),v(a.somInfo.objectName,"gif",b,c,e).then(g=>{w(g,c)}).catch(g=>{console.error("Transcode start failed: "+g);SOM.reportError("TranscodeStartFailedAfterEditing",g);p("error")}))};a.updateTitle=function(b){a.set("title",b);SOM.updateScreencastTitle(a.somInfo.screencastId,b)};a.putInFolder=function(b){SOM.putScreencastInFolder(a.somInfo.screencastId,
b)};t.listen("start",b=>a.start(b.title,b.resolution,a.streamGetter?a.streamGetter(b.stream):b.stream,b.doneCallback,b.updateTimeCallback));t.listen("trim",b=>{a.trim(b.startMS,b.lenMS,b.crop)});t.listen("setGifUploadCallback",b=>{a.setGifUploadCallback(b.callback)});t.listen("getRecTime",b=>new Promise(function(c){c(RecTime.getDurationMS())}));a.setOffscreenStreamGetter=b=>{a.streamGetter=b};return a}();